import re, json

ips_unicas = set()
errores = {
    "100": 0,
    "200": 0,
    "300": 0,
    "400": 0,
    "500": 0
}

def extractFromRegularExpresion(regex, data):
    if data:
        return re.findall(regex, data)
    return None

# Abrimos el archivo correctamente
with open(r"C:\Users\julia\Downloads\access.log", "r") as file:
    data = file.read()

# Expresión regular para extraer IPs y códigos de estado HTTP
regex = r"(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s-\s-\s\[(\d{2}/\b[a-zA-Z]{3}\b/\d{4}):(\d{2}:\d{2}:\d{2})\s\+\d{4,6}]\s\"(\b[A-Z]{3,7}\b\s(\/\S+)\sHTTP/\d{1}\.\d{1})\"\s(\d{3})"

resultado = extractFromRegularExpresion(regex, data)

# Procesamos los resultados
for i in resultado:
    ip = i[0]  # IP
    codigo_http = i[5]  # Código de estado HTTP
    
    ips_unicas.add((ip, codigo_http))  

    # Contamos los errores según el código de estado
    if codigo_http.startswith("1"):
        errores["100"] += 1
    elif codigo_http.startswith("2"):
        errores["200"] += 1
    elif codigo_http.startswith("3"):
        errores["300"] += 1
    elif codigo_http.startswith("4"):
        errores["400"] += 1
    elif codigo_http.startswith("5"):
        errores["500"] += 1
    
# Imprimir solo las IPs únicas con su código de error
print("\nIPs únicas con errores:")
for ip, codigo_http in ips_unicas:
    print(f"IP: {ip} - Código HTTP: {codigo_http}")

# Imprimir el conteo de errores
print("\nConteo de errores:")
for categoria, cantidad in errores.items():
    print(f"{categoria}: {cantidad}")
